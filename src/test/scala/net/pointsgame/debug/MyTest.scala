package net.pointsgame.debug

import utest._
import net.pointsgame.debug.Debug._
import net.pointsgame.debug.Debug.onlyInDebug

object MyTest extends TestSuite {
	val tests = TestSuite {

		'onlyInDebugSimple {
			// doesn't really test anything -- just shows use case
			val someHeavyTree = List(1, 2, 3)
			onlyInDebug {
				// TODO: explain what happens here!
				println(someHeavyTree.sorted)
			}
		}

//		'onlyInDebug {
//			var i = 0
//			val executedIfDebugOnly = onlyInDebug {
//				i = 1
//			}
//			assert((executedIfDebugOnly, i) match {
//				case (None, 0) => true // code eliminated at compile time
//				case (Some(_), 1) => true // code was executed and returned Some()
//				case _ => false
//			})
//		}

		'printTypeDoesntFail {
			printType("a" + 2)
			printType(null)
		}
		'printType {
			// should print "String" at compile time.
			// At run-time this expression is stupid, it says `assert(1 + 2 == 3)` (directly in the generated byte-code)
			assert(printType(1 + 2) == 3)
		}

		'prettyPrintSurvivesNulls {
			assert(prettyPrint() == "")
			assert(prettyPrint(null) == "null")
			assert(prettyPrint(1, 2, null, null) == "1, 2, null, null")
			assert(prettyPrint(1, "2", null, null) == "1, 2, null, null")
			assert(prettyPrint(if (1 == 1) null else null) contains "if (true)")
		}

		'prettyPrintWorksGood {
			assert(prettyPrint("1") == "1")
			assert(prettyPrint(1) == "1")

			val a = 1
			val b = 2
			assert(prettyPrint(a + b) == "a.+(b) = 3")
		}

	}
}
